{"version":3,"file":"tldrwp-editor.js","mappings":"iCAAAA,EAAOC,QAAUC,OAAW,GAAW,O,UCAvCF,EAAOC,QAAUC,OAAW,GAAQ,I,UCApCF,EAAOC,QAAUC,OAAW,GAAW,O,UCAvCF,EAAOC,QAAUC,OAAW,GAAY,Q,UCAxCF,EAAOC,QAAUC,OAAW,GAAc,U,UCA1CF,EAAOC,QAAUC,OAAc,K,UCA/BF,EAAOC,QAAUC,OAAW,GAAQ,I,GCChCC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,CCrBAG,EAAoBK,EAAKT,IACxB,IAAIU,EAASV,GAAUA,EAAOW,WAC7B,IAAOX,EAAiB,QACxB,IAAM,EAEP,OADAI,EAAoBQ,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,GCLRN,EAAoBQ,EAAI,CAACX,EAASa,KACjC,IAAI,IAAIC,KAAOD,EACXV,EAAoBY,EAAEF,EAAYC,KAASX,EAAoBY,EAAEf,EAASc,IAC5EE,OAAOC,eAAejB,EAASc,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3EX,EAAoBY,EAAI,CAACK,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,G,mECOlFI,EAAAA,EAAAA,gBAAe,gBAAiB,CAC5BC,OAAQA,KACJ,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,IACpCC,EAAYC,IAAiBF,EAAAA,EAAAA,UAAS,MAEvCG,GAASC,EAAAA,EAAAA,WAAUC,GACrBA,EAAO,eAAeC,mBACtB,IAGEC,GAAWH,EAAAA,EAAAA,WAAUC,GACvBA,EAAO,eAAeG,uBAAuB,SAAW,CAAC,EACzD,KAGE,SAAEC,IAAaC,EAAAA,EAAAA,aAAY,eAG3BC,EAA+B,OAAfV,EAAsBA,GAAcM,EAASK,iBAgDnE,OA7CAC,QAAQC,IAAI,0BAA2BX,GACvCU,QAAQC,IAAI,4BAA6BP,GACzCM,QAAQC,IAAI,gCAAiCP,EAASK,kBACtDC,QAAQC,IAAI,8BAA+Bb,GAC3CY,QAAQC,IAAI,+BAAgCH,IA0CxCI,EAAAA,EAAAA,eAACC,EAAAA,2BAA0B,CACvBC,KAAK,eACLC,OAAOC,EAAAA,EAAAA,IAAG,QAAS,UACnBC,aAAa,IAEbL,EAAAA,EAAAA,eAACM,EAAAA,cAAa,CACVC,OAAOH,EAAAA,EAAAA,IAAG,eAAgB,UAC1BI,QAASZ,EACTa,SAhDgBC,IACxBZ,QAAQC,IAAI,oCAAqCW,GACjD1B,GAAa,GACbG,EAAcuB,GAGd,MAAMC,EAAc,IACbnB,EACHK,kBAAmBa,GAGvBZ,QAAQC,IAAI,+BAAgCY,GAE5CjB,EAAS,CACLkB,KAAMD,IAIV,MAAME,EAAW,IAAIC,SACrBD,EAASE,OAAO,SAAU,oBAC1BF,EAASE,OAAO,UAAW3B,GAC3ByB,EAASE,OAAO,iBAAkBL,GAClCG,EAASE,OAAO,QAAS1D,OAAO2D,aAAe3D,OAAO2D,aAAaC,MAAQ,IAE3EC,MAAM7D,OAAO2D,aAAe3D,OAAO2D,aAAaG,QAAU,2BAA4B,CAClFC,OAAQ,OACRC,KAAMR,IAETS,KAAKC,GAAYA,EAASC,QAC1BF,KAAKG,IACF3B,QAAQC,IAAI,gCAAiC0B,GAC7CzC,GAAa,KAEhB0C,MAAMC,IACH7B,QAAQ6B,MAAM,6BAA8BA,GAC5C3C,GAAa,MAcT4C,SAAU7C,EACV8C,MAAMzB,EAAAA,EAAAA,IAAG,yEAA0E,e","sources":["webpack://tldrwp/external window [\"wp\",\"element\"]","webpack://tldrwp/external window [\"wp\",\"data\"]","webpack://tldrwp/external window [\"wp\",\"plugins\"]","webpack://tldrwp/external window [\"wp\",\"editPost\"]","webpack://tldrwp/external window [\"wp\",\"components\"]","webpack://tldrwp/external window \"React\"","webpack://tldrwp/external window [\"wp\",\"i18n\"]","webpack://tldrwp/webpack/bootstrap","webpack://tldrwp/webpack/runtime/compat get default export","webpack://tldrwp/webpack/runtime/define property getters","webpack://tldrwp/webpack/runtime/hasOwnProperty shorthand","webpack://tldrwp/./admin/js/tldrwp-editor.js"],"sourcesContent":["module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"data\"];","module.exports = window[\"wp\"][\"plugins\"];","module.exports = window[\"wp\"][\"editPost\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"React\"];","module.exports = window[\"wp\"][\"i18n\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { registerPlugin } from '@wordpress/plugins';\nimport { PluginDocumentSettingPanel } from '@wordpress/edit-post';\nimport { ToggleControl } from '@wordpress/components';\nimport { useState, useEffect } from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\n\nregisterPlugin('tldrwp-toggle', {\n    render: () => {\n        const [isLoading, setIsLoading] = useState(false);\n        const [localValue, setLocalValue] = useState(null);\n        \n        const postId = useSelect(select => \n            select('core/editor').getCurrentPostId(), \n            []\n        );\n        \n        const postMeta = useSelect(select => \n            select('core/editor').getEditedPostAttribute('meta') || {}, \n            []\n        );\n        \n        const { editPost } = useDispatch('core/editor');\n        \n        // Check if TL;DR is disabled (meta field is true when disabled)\n        const isTLDREnabled = localValue !== null ? localValue : !postMeta._tldrwp_disabled;\n\n        // Debug: Log the meta field value\n        console.log('TLDRWP Debug - Post ID:', postId);\n        console.log('TLDRWP Debug - Post Meta:', postMeta);\n        console.log('TLDRWP Debug - TLDR Disabled:', postMeta._tldrwp_disabled);\n        console.log('TLDRWP Debug - Local Value:', localValue);\n        console.log('TLDRWP Debug - TLDR Enabled:', isTLDREnabled);\n\n        const handleToggleChange = (newValue) => {\n            console.log('TLDRWP Debug - Toggle changed to:', newValue);\n            setIsLoading(true);\n            setLocalValue(newValue);\n            \n            // Update the meta field - when newValue is true (enabled), _tldrwp_disabled should be false\n            const updatedMeta = {\n                ...postMeta,\n                _tldrwp_disabled: !newValue\n            };\n            \n            console.log('TLDRWP Debug - Updated Meta:', updatedMeta);\n            \n            editPost({\n                meta: updatedMeta\n            });\n            \n            // Also save directly via AJAX as a backup\n            const formData = new FormData();\n            formData.append('action', 'tldrwp_save_meta');\n            formData.append('post_id', postId);\n            formData.append('tldr_disabled', !newValue);\n            formData.append('nonce', window.tldrwpEditor ? window.tldrwpEditor.nonce : '');\n            \n            fetch(window.tldrwpEditor ? window.tldrwpEditor.ajaxurl : '/wp-admin/admin-ajax.php', {\n                method: 'POST',\n                body: formData\n            })\n            .then(response => response.json())\n            .then(data => {\n                console.log('TLDRWP Debug - AJAX response:', data);\n                setIsLoading(false);\n            })\n            .catch(error => {\n                console.error('TLDRWP Debug - AJAX error:', error);\n                setIsLoading(false);\n            });\n        };\n\n        return (\n            <PluginDocumentSettingPanel\n                name=\"tldrwp-panel\"\n                title={__('TL;DR', 'tldrwp')}\n                initialOpen={false}\n            >\n                <ToggleControl\n                    label={__('Enable TL;DR', 'tldrwp')}\n                    checked={isTLDREnabled}\n                    onChange={handleToggleChange}\n                    disabled={isLoading}\n                    help={__('Show the TL;DR button and functionality on the frontend for this post.', 'tldrwp')}\n                />\n            </PluginDocumentSettingPanel>\n        );\n    },\n});"],"names":["module","exports","window","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","registerPlugin","render","isLoading","setIsLoading","useState","localValue","setLocalValue","postId","useSelect","select","getCurrentPostId","postMeta","getEditedPostAttribute","editPost","useDispatch","isTLDREnabled","_tldrwp_disabled","console","log","createElement","PluginDocumentSettingPanel","name","title","__","initialOpen","ToggleControl","label","checked","onChange","newValue","updatedMeta","meta","formData","FormData","append","tldrwpEditor","nonce","fetch","ajaxurl","method","body","then","response","json","data","catch","error","disabled","help"],"sourceRoot":""}